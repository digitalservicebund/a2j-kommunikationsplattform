import { http, HttpResponse } from "msw";

/**
 * All defined Handlers intercept a request and handle its response
 *
 * This file was initially AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 *
 * @see https://mswjs.io/docs/concepts/request-handler
 * @see https://mswjs.io/docs/basics/intercepting-requests
 * @see https://mswjs.io/docs/basics/mocking-responses
 */

const baseMockApiUrl = "https://kompla.sinc.de";

export const handlers = [
  http.get(`${baseMockApiUrl}/api/v1/verfahren`, async () => {
    const resultArray = [[getGetApiV1Verfahren200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[0]);
  }),
  http.post(`${baseMockApiUrl}/api/v1/verfahren`, async () => {
    const resultArray = [[getPostApiV1Verfahren201Response(), { status: 201 }]];

    return HttpResponse.json(...resultArray[0]);
  }),
  http.get(
    `${baseMockApiUrl}/api/v1/verfahren/:verfahrenId`,
    async ({ params }) => {
      const resultArray = [
        [
          getGetApiV1VerfahrenVerfahrenId200Response(params.verfahrenId),
          { status: 200 },
        ],
      ];

      return HttpResponse.json(...resultArray[0]);
    },
  ),
  http.get(
    `${baseMockApiUrl}/api/v1/verfahren/:verfahrenId/akte`,
    async ({ params }) => {
      const resultArray = [
        [
          getGetApiV1VerfahrenVerfahrenIdAkte200Response(params.verfahrenId),
          { status: 200 },
        ],
      ];

      return HttpResponse.json(...resultArray[0]);
    },
  ),
  http.get(
    `${baseMockApiUrl}/api/v1/verfahren/:verfahrenId/akte/:aktenteilId/dokumente`,
    async ({ params }) => {
      const resultArray = [
        [
          getGetApiV1VerfahrenVerfahrenIdAkteAktenteilIdDokumente200Response(
            params.verfahrenId,
          ),
          { status: 200 },
        ],
      ];

      return HttpResponse.json(...resultArray[0]);
    },
  ),
  http.get(
    `${baseMockApiUrl}/api/v1/verfahren/:verfahrenId/akte/dokumente/:dokumentId`,
    async ({ params }) => {
      const resultArray = [
        [
          getGetApiV1VerfahrenVerfahrenIdAkteDokumenteDokumentId200Response(
            params.dokumentId,
          ),
          { status: 200 },
        ],
      ];

      return HttpResponse.json(...resultArray[0]);
    },
  ),
  http.post(
    `${baseMockApiUrl}/api/v1/verfahren/:verfahrenId/dokumente`,
    async () => {
      const resultArray = [
        [
          getPostApiV1VerfahrenVerfahrenIdDokumente201Response(),
          { status: 201 },
        ],
      ];

      return HttpResponse.json(...resultArray[0]);
    },
  ),
];

const mockVerfahrenEingereichtId = "4e7fb42e-beec-4407-938e-a2d05321de01";
const mockVerfahrenEingereichtAktenzeichen = "JBA-17546037";
const mockVerfahrenEingereicht = {
  id: mockVerfahrenEingereichtId,
  aktenzeichen: mockVerfahrenEingereichtAktenzeichen,
  status: "Eingereicht",
  status_changed: "2025-04-03T10:42:08.749Z",
  eingereicht_am: "2025-03-08T04:08:25.169Z",
  gericht_name: "Landgericht Bonn",
};
const mockVerfahrenEingereichtAkte = {
  id: "ab2dd8f0-b00c-415a-825b-22e1c2b0f88a",
  aktenzeichen: mockVerfahrenEingereichtAktenzeichen,
  aktenteile: [
    {
      id: "2bea6db9-bfc5-43fc-ba2f-3da34ec5629f",
      name: "Eingänge",
      parent_id: "6a75d179-cc76-4d75-ada0-ccdcbaa0fd0d",
    },
  ],
};

const mockVerfahrenErstelltAktenzeichen = "JBA-82746242";
const mockVerfahrenErstellt = {
  id: "dea3cbc7-d00a-48bf-95a1-4d6f07406196",
  aktenzeichen: mockVerfahrenErstelltAktenzeichen,
  status: "Erstellt",
  status_changed: "2025-03-08T05:00:29.659Z",
  eingereicht_am: "2024-12-29T22:46:29.329Z",
  gericht_name: "Landgericht Frankfurt",
};
const mockVerfahrenErstelltAkte = {
  id: "ab2dd8f0-b00c-415a-825b-22e1c2b0f88a",
  aktenzeichen: mockVerfahrenErstelltAktenzeichen,
  aktenteile: [
    {
      id: "19fc08e6-520a-4667-a3f1-5018dd20d736",
      name: "Vorakte",
      parent_id: "5eb79a71-6a6d-4d9c-b9c2-b59482f03efa",
    },
    {
      id: "0b673fef-1c0a-4b12-8294-45893f178e5a",
      name: "Hauptakte",
      parent_id: "f98943c6-68c7-434c-86a8-0467b56a3501",
    },
    {
      id: "387e30cb-a82c-4d60-ac4a-35dbc38bfe3f",
      name: "Kostenheft",
      parent_id: "2f06d0b6-0041-432f-86cd-27ecc27bc9d4",
    },
    {
      id: "4dbf56f7-b209-4bf6-957e-52b2298890c4",
      name: "Zum Geschäftsgang",
      parent_id: "e84096be-d929-458e-93ee-674d0af60b7b",
    },
    {
      id: "2bea6db9-bfc5-43fc-ba2f-3da34ec5629f",
      name: "Eingänge",
      parent_id: "6a75d179-cc76-4d75-ada0-ccdcbaa0fd0d",
    },
    {
      id: "e008da8b-5ec4-43e4-837f-cbce00d63358",
      name: "Ausgänge",
      parent_id: "83ccf9d2-9e62-482e-9e19-acc49151c911",
    },
    {
      id: "50e62760-f591-401f-bc54-1a8506d81ba3",
      name: "Entwürfe",
      parent_id: "9cdd0996-0fa9-4a1d-b79f-6ead4703f9e0",
    },
    {
      id: "fbf4ada6-b73d-47db-a0d6-5d0ed5ac19d4",
      name: "Ablage",
      parent_id: "",
    },
  ],
};

export function getGetApiV1Verfahren200Response() {
  return [mockVerfahrenErstellt, mockVerfahrenEingereicht];
}

export function getPostApiV1Verfahren201Response() {
  return mockVerfahrenEingereicht;
}

export function getGetApiV1VerfahrenVerfahrenId200Response(id) {
  const returnVerfahrenById =
    id === mockVerfahrenEingereichtId
      ? mockVerfahrenEingereicht
      : mockVerfahrenErstellt;
  return returnVerfahrenById;
}

export function getGetApiV1VerfahrenVerfahrenIdAkte200Response(id) {
  const returnAkteByVerfahrenId =
    id === mockVerfahrenEingereichtId
      ? mockVerfahrenEingereichtAkte
      : mockVerfahrenErstelltAkte;

  return returnAkteByVerfahrenId;
}

// @TODO verify good demo ability
export function getGetApiV1VerfahrenVerfahrenIdAkteAktenteilIdDokumente200Response(
  verfahrenId,
) {
  return {
    verfahren_id: verfahrenId,
    dokumente: [
      {
        id: "92eb7f26-41a3-40d7-ba79-a22914a1bb80",
        name: "Akteninnendeckel.docx",
        dokument_klasse: "Andere / Sonstige",
      },
      {
        id: "4e22f0a4-49f0-4ed9-ba43-90901ff7e4f4",
        name: "Aktendeckel.docx",
        dokument_klasse: "Andere / Sonstige",
      },
    ],
    count: 2,
  };
}

// @TODO verify good demo ability
export function getGetApiV1VerfahrenVerfahrenIdAkteDokumenteDokumentId200Response(
  dokumentId,
) {
  return `${dokumentId}.pdf`;
}

// @TODO verify good demo ability
export function getPostApiV1VerfahrenVerfahrenIdDokumente201Response() {
  return [
    {
      id: "c8eb4bac-73d5-4a55-b7ab-19b8a925d1fb",
      name: "Blanca Hegmann",
      dokument_klasse: "repudiandae stillicidium vitiosus",
    },
  ];
}
