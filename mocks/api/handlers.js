import { http, HttpResponse } from "msw";
import { v4 as uuidv4 } from "uuid";

import {
  mockVerfahrenEingereichtId,
  mockVerfahrenEingereicht,
  mockVerfahrenEingereichtAkte,
  mockVerfahrenErstelltId,
  mockVerfahrenErstellt,
  mockVerfahrenErstelltAkte,
  mockAktenteilDokumente,
  getDokumentByAktenteilId,
} from "./data.js";

/**
 * All defined Handlers intercept a request and handle its response
 *
 * This file was initially AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 *
 * @see https://mswjs.io/docs/concepts/request-handler
 * @see https://mswjs.io/docs/basics/intercepting-requests
 * @see https://mswjs.io/docs/basics/mocking-responses
 */

const baseMockApiUrl = "https://kompla.sinc.de";

// Let's keep a map of all mocked Verfahren and its Dokumente and Aktenteile in memory.
// At the beginning, we add some default data to each mocked Verfahren (e.g. Aktenteile & Dokumente).
const verfahren = new Map();
let verfahrenId = 0;
verfahren.set(verfahrenId++, mockVerfahrenErstellt);
verfahren.set(verfahrenId++, mockVerfahrenEingereicht);

const aktenteilDokumenteVerfahrenEingereicht = new Map();
const aktenteilDokumenteVerfahrenErstellt = new Map();

const getVerfahren = () => {
  let collectVerfahren = [];
  for (const value of verfahren.values()) {
    collectVerfahren.push(value);
  }
  return collectVerfahren;
};

export const handlers = [
  http.get(`${baseMockApiUrl}/api/v1/verfahren`, async () => {
    const collectVerfahren = getVerfahren();
    const getVerfahrenResponse = [collectVerfahren, { status: 200 }];

    return HttpResponse.json(...getVerfahrenResponse);
  }),

  http.post(`${baseMockApiUrl}/api/v1/verfahren`, async () => {
    // generate random 8 digit number for "aktenzeichen"
    const randomAktenId = Math.floor(10000000 + Math.random() * 900000);
    const dateTimeNow = new Date().toJSON();
    // create a new "Verfahren"
    const randomNewVerfahren = {
      id: uuidv4(),
      aktenzeichen: `JBA-${randomAktenId}`,
      status: "Eingereicht",
      status_changed: dateTimeNow,
      eingereicht_am: dateTimeNow,
      gericht_name: "Landgericht Berlin",
    };
    // increment verfahrenId
    verfahrenId++;
    // and add the randomNewVerfahren to the verfahren Map
    verfahren.set(verfahrenId, randomNewVerfahren);
    const getAddedVerfahren = verfahren.get(verfahrenId);

    const postVerfahrenResponse = [getAddedVerfahren, { status: 201 }];

    return HttpResponse.json(...postVerfahrenResponse);
  }),

  // endpoint is not used by the frontend at the moment
  http.get(
    `${baseMockApiUrl}/api/v1/verfahren/:verfahrenId`,
    async ({ params }) => {
      let getRequestedVerfahren;
      for (const [verfahrenKey, verfahrenValue] of verfahren) {
        for (const [key, value] of Object.entries(verfahrenValue)) {
          if (key === "id") {
            if (value === params.verfahrenId) {
              getRequestedVerfahren = verfahren.get(verfahrenKey);
            }
          }
        }
      }

      const getGetApiV1VerfahrenVerfahrenId200Response = [
        getRequestedVerfahren,
        { status: 200 },
      ];

      return HttpResponse.json(...getGetApiV1VerfahrenVerfahrenId200Response);
    },
  ),
  http.get(
    `${baseMockApiUrl}/api/v1/verfahren/:verfahrenId/akte`,
    async ({ params }) => {
      const resultArray = [
        [
          getGetApiV1VerfahrenVerfahrenIdAkte200Response(params.verfahrenId),
          { status: 200 },
        ],
      ];

      // console.log('Captured "GET /api/v1/verfahren/:verfahrenId/akte" request');
      return HttpResponse.json(...resultArray[0]);
    },
  ),
  http.get(
    `${baseMockApiUrl}/api/v1/verfahren/:verfahrenId/akte/:aktenteilId/dokumente`,
    async ({ params }) => {
      const resultArray = [
        [
          getGetApiV1VerfahrenVerfahrenIdAkteAktenteilIdDokumente200Response(
            params.verfahrenId,
            params.aktenteilId,
          ),
          { status: 200 },
        ],
      ];

      // console.log(
      //   "GET /api/v1/verfahren/:verfahrenId/akte/:aktenteilId/dokumente, mockVerfahrenErstelltAkte:\n",
      //   mockVerfahrenErstelltAkte,
      //   "aktenteilDokumente:\n",
      //   aktenteilDokumenteVerfahrenErstellt,
      // );

      // console.log(
      //   'Captured "GET /api/v1/verfahren/:verfahrenId/akte/:aktenteilId/dokumente" request',
      // );
      return HttpResponse.json(...resultArray[0]);
    },
  ),
  http.get(
    `${baseMockApiUrl}/api/v1/verfahren/:verfahrenId/akte/dokumente/:dokumentId`,
    async ({ params }) => {
      const resultArray = [
        [
          getGetApiV1VerfahrenVerfahrenIdAkteDokumenteDokumentId200Response(
            params.dokumentId,
          ),
          { status: 200 },
        ],
      ];

      // console.log(
      //   'Captured "GET /api/v1/verfahren/:verfahrenId/akte/dokumente/:dokumentId" request',
      // );
      return HttpResponse.json(...resultArray[0]);
    },
  ),
  http.post(
    `${baseMockApiUrl}/api/v1/verfahren/:verfahrenId/dokumente`,
    async ({ params }) => {
      const resultArray = [
        [
          getPostApiV1VerfahrenVerfahrenIdDokumente201Response(),
          { status: 201 },
        ],
      ];

      /**
       * TODO:
       *
       * - [x] for the respective verfahrenId, can we find that on the client side already!?
       * - [ ] find "Eingänge" within mockVerfahrenErstelltAkte and mockVerfahrenEingereichtAkte
       *   - [ ] create "Eingänge" within mockVerfahrenEingereichtAkte
       * - [ ] and push the "Dokument_uploaded.pdf" dokument to that aktenteil
       *
       * params exmaple: {"verfahrenId":"1abbb42e-beec-4407-938e-a2d05321de01"}
       */

      console.log(
        'Captured "POST /api/v1/verfahren/:verfahrenId/dokumente" request, params:',
        JSON.stringify(params),
      );
      return HttpResponse.json(...resultArray[0]);
    },
  ),
];

export function getGetApiV1VerfahrenVerfahrenIdAkte200Response(id) {
  const returnAkteByVerfahrenId =
    id === mockVerfahrenEingereichtId
      ? mockVerfahrenEingereichtAkte
      : mockVerfahrenErstelltAkte;

  return returnAkteByVerfahrenId;
}

// @TODO verify good demo ability
export function getGetApiV1VerfahrenVerfahrenIdAkteAktenteilIdDokumente200Response(
  verfahrenId,
  aktenteilId,
) {
  // console.log("\n---");
  // console.log(
  //   "getGetApiV1VerfahrenVerfahrenIdAkteAktenteilIdDokumente200Response:: verfahrenId",
  //   verfahrenId,
  //   "and aktenteilId",
  //   aktenteilId,
  //   "\n\n",
  // );

  const dokumente = getDokumentByAktenteilId(aktenteilId);

  if (verfahrenId === mockVerfahrenEingereichtId) {
    // console.log("safe it in this folder\n");
    aktenteilDokumenteVerfahrenEingereicht.set(aktenteilId, dokumente);
  } else {
    // console.log("safe it in the other folder\n");
    aktenteilDokumenteVerfahrenErstellt.set(aktenteilId, dokumente);
  }

  // console.log(`dokumente for ${aktenteilId}:\n${JSON.stringify(dokumente)}\n`);

  // hier bekommen wir die verfahren_id im response zurück (gleiche wie im request)
  // im response ist außerdem eine id für das jeweilge dokument,
  // die beim GET request für eine Dokument mitgegeben werden muss
  // - verfahren_id (wie im request)
  // - array an dokumenten, mit "id" (mit dem es angezeigt werden kann via GET request)

  // NEXT STEP:::
  // in mockVerfahrenErstelltAkte je aktenteile item ein
  // passendes dokumente response erstellen
  //
  // benötigt selbe verfahren_id
  //
  // dokumente id(s) können eigenständig sein
  // - werden dann aber im folgenden request wiederum genutzt um ein dokument darzustellen (gleiche id)

  // console.log("dokumente", dokumente);
  // console.log("dokumente.values", dokumente.values());
  // console.log("Array from dokumente.values", Array.from(dokumente.values()));
  // get random dokumente from mockAktenteilDokumente

  // console.log(
  //   "\nlog aktenteilDokumenteVerfahrenErstellt",
  //   aktenteilDokumenteVerfahrenErstellt,
  // );

  return {
    verfahren_id: verfahrenId,
    dokumente: dokumente,
    count: dokumente.length,
  };
}

// @TODO verify good demo ability
export function getGetApiV1VerfahrenVerfahrenIdAkteDokumenteDokumentId200Response(
  dokumentId,
) {
  return `${dokumentId}.pdf`;
}

// @TODO verify good demo ability
export function getPostApiV1VerfahrenVerfahrenIdDokumente201Response() {
  return [
    {
      id: "c8eb4bac-73d5-4a55-b7ab-19b8a925d1fb",
      name: "Blanca Hegmann",
      dokument_klasse: "repudiandae stillicidium vitiosus",
    },
  ];
}
